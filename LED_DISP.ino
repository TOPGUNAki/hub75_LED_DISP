#include <Adafruit_GFX.h>
#include "hardware/regs/io_bank0.h"
#include "hardware/regs/sio.h"
#include "hardware/structs/sio.h"

#define ADDA 10
#define ADDB 9
#define ADDC 8
#define ADDD 6

#define OE 7
#define DR1 5
#define DR2 3
#define DG1 4
#define DG2 2
#define STB 1
#define CLK 0

#define dokaben_0_width 128
#define dokaben_0_height 32
static unsigned char dokaben_0_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x0f, 0xe0, 0xc0, 0x07, 0x00, 0x80, 0x3f, 0x60, 0xc0, 0x07,
   0xf8, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xc0, 0x03, 0x00, 0x80,
   0x03, 0x00, 0xfe, 0x1f, 0xe0, 0x03, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x3c,
   0xe0, 0x01, 0xc0, 0x80, 0x07, 0x1e, 0x00, 0x1e, 0x00, 0x00, 0xff, 0xff,
   0xff, 0xff, 0x00, 0xfc, 0xf9, 0x03, 0x18, 0xe0, 0xff, 0xff, 0x01, 0x3e,
   0x00, 0x80, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfe, 0xff, 0xf3, 0x1f, 0xff,
   0xff, 0xff, 0xff, 0xfc, 0x03, 0xfe, 0xff, 0xff };

   #define dokaben_1_width 128
#define dokaben_1_height 32
static unsigned char dokaben_1_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0,
   0xc1, 0xf7, 0x01, 0xdf, 0x7f, 0xe0, 0xc0, 0x07, 0xfc, 0xf7, 0xff, 0xff,
   0xff, 0xff, 0x0f, 0x60, 0xe0, 0x07, 0x00, 0x80, 0x3f, 0x40, 0xe0, 0x07,
   0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xc0, 0x03, 0x00, 0x80,
   0x0f, 0x00, 0xff, 0x1f, 0xe0, 0x07, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00,
   0xe0, 0x03, 0x80, 0x80, 0x07, 0x00, 0xe0, 0x3f, 0xc0, 0x01, 0xfe, 0xff,
   0xff, 0xff, 0x03, 0x08, 0xe0, 0x0f, 0xc0, 0x80, 0x07, 0x1e, 0x00, 0x1e,
   0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x7e, 0xf0, 0x00, 0x00, 0x80,
   0x0f, 0x7f, 0x00, 0x1c, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x00, 0xfc,
   0xf9, 0x03, 0x08, 0xe0, 0xff, 0xff, 0x01, 0x3e, 0x00, 0x80, 0xff, 0xff,
   0xff, 0x7f, 0x00, 0xfe, 0xff, 0xc7, 0x1f, 0xfc, 0xff, 0xff, 0x3f, 0x7e,
   0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define dokaben_2_width 128
#define dokaben_2_height 32
static unsigned char dokaben_2_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0x00, 0xff,
   0x7f, 0xf0, 0xff, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xe0,
   0xc0, 0xf7, 0x01, 0xdf, 0x7f, 0xe0, 0xc0, 0x07, 0xfc, 0xe7, 0xff, 0xff,
   0xff, 0xff, 0x07, 0x70, 0xe0, 0x07, 0x00, 0x80, 0x7f, 0xe0, 0xc0, 0x0f,
   0xf0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x07, 0x70, 0xf0, 0x03, 0x00, 0x80,
   0x3f, 0x40, 0xc0, 0x0f, 0xf0, 0x0f, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0xc0,
   0xff, 0x03, 0x00, 0x80, 0x1f, 0x80, 0xff, 0x1f, 0xe0, 0x0f, 0xfe, 0xff,
   0xff, 0xff, 0x07, 0x00, 0xe0, 0x03, 0x00, 0x80, 0x03, 0x00, 0xfe, 0x1f,
   0xc0, 0x07, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0xe0, 0x03, 0x80, 0x80,
   0x07, 0x00, 0xe0, 0x3f, 0x80, 0x03, 0xfc, 0xff, 0xff, 0xff, 0x03, 0x00,
   0xe0, 0x1f, 0xc0, 0x80, 0x07, 0x0c, 0x00, 0xfe, 0x7f, 0x00, 0xfe, 0xff,
   0xff, 0xff, 0x03, 0x04, 0xe0, 0x0f, 0xc0, 0x80, 0x07, 0x1e, 0x00, 0x1e,
   0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x03, 0x3e, 0xf0, 0x00, 0x60, 0x80,
   0x0f, 0x3e, 0x00, 0x1c, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 0xfe,
   0xf8, 0x01, 0x00, 0xc0, 0x8f, 0x7f, 0x00, 0x3c, 0x00, 0x00, 0xfe, 0xff,
   0xff, 0xff, 0x01, 0xff, 0xf8, 0x01, 0x08, 0xc0, 0xcf, 0xff, 0x00, 0x3e,
   0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfe, 0xfb, 0x03, 0x0e, 0xf0,
   0xff, 0xff, 0x07, 0x3e, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfe,
   0xff, 0xc3, 0x1f, 0xfc, 0xff, 0xff, 0x7f, 0x7e, 0x00, 0xf0, 0xff, 0xff,
   0xff, 0x3f, 0x00, 0xff, 0xff, 0xf3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc,
   0x07, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define dokaben_3_width 128
#define dokaben_3_height 32
static unsigned char dokaben_3_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x01, 0xf8, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0xe0, 0xff, 0x0f,
   0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x78, 0xe0, 0x7f, 0x00, 0xff,
   0x7f, 0xe0, 0x01, 0x0f, 0xf0, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x03, 0x78,
   0xf0, 0xfb, 0x00, 0xdf, 0x7f, 0xc0, 0x81, 0x1f, 0xf0, 0x9f, 0xff, 0xff,
   0xff, 0xff, 0x03, 0x38, 0xf0, 0x03, 0x00, 0x80, 0x7f, 0xc0, 0x81, 0x1f,
   0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x01, 0x38, 0xf8, 0x03, 0x00, 0x80,
   0x7f, 0x80, 0xc0, 0x1f, 0xe0, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0x03, 0x18,
   0xf8, 0x03, 0x00, 0x80, 0x3f, 0x00, 0xc8, 0x3f, 0xe0, 0x1f, 0xf8, 0xff,
   0xff, 0xff, 0x03, 0xf0, 0xff, 0x01, 0x00, 0x80, 0x1f, 0x00, 0xff, 0x3f,
   0x80, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0x03, 0x00, 0xe0, 0x01, 0x00, 0x80,
   0x0f, 0x00, 0xfe, 0x3f, 0x80, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0x03, 0x00,
   0xe0, 0x01, 0x00, 0x80, 0x03, 0x00, 0xf0, 0x7f, 0x00, 0x0f, 0xf8, 0xff,
   0xff, 0xff, 0x01, 0x00, 0xf0, 0x01, 0x40, 0x80, 0x07, 0x00, 0xc0, 0x7f,
   0x00, 0x07, 0xf8, 0xff, 0xff, 0xff, 0x01, 0x00, 0xf0, 0x39, 0x40, 0x80,
   0x07, 0x08, 0x00, 0xff, 0xff, 0x03, 0xf8, 0xff, 0xff, 0xff, 0x01, 0x00,
   0xf0, 0x1f, 0x60, 0x80, 0x07, 0x08, 0x00, 0xfc, 0xff, 0x00, 0xf8, 0xff,
   0xff, 0xff, 0x01, 0x0e, 0xf0, 0x00, 0x60, 0x80, 0x07, 0x1c, 0x00, 0x3c,
   0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x1f, 0xf8, 0x00, 0x30, 0x80,
   0x0f, 0x3e, 0x00, 0x3c, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x3f,
   0xf8, 0x00, 0x00, 0x80, 0x0f, 0xff, 0x00, 0x3c, 0x00, 0x00, 0xfc, 0xff,
   0xff, 0xff, 0x00, 0x7f, 0xf8, 0x01, 0x00, 0xc0, 0x8f, 0xff, 0x00, 0x3c,
   0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x00, 0xff, 0xf8, 0x01, 0x08, 0xc0,
   0xcf, 0xff, 0x01, 0x3e, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0x00, 0xfe,
   0xf9, 0x01, 0x0c, 0xe0, 0xff, 0xff, 0x03, 0x3e, 0x00, 0x00, 0xff, 0xff,
   0xff, 0x7f, 0x00, 0xfe, 0xff, 0x01, 0x0e, 0xf0, 0xff, 0xff, 0x0f, 0x3c,
   0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfe, 0xff, 0xc3, 0x1f, 0xfc,
   0xff, 0xff, 0x7f, 0xfc, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xff,
   0xff, 0xf3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xfc, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define dokaben_4_width 128
#define dokaben_4_height 32
static unsigned char dokaben_4_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xff,
   0xff, 0x3f, 0x80, 0xff, 0xff, 0xc0, 0xff, 0x3f, 0x80, 0xff, 0xff, 0xff,
   0xff, 0x3f, 0x00, 0x0f, 0xf8, 0x3f, 0x80, 0xff, 0xff, 0xc0, 0x03, 0x3c,
   0x80, 0xff, 0xfd, 0xff, 0xff, 0x3f, 0x00, 0x0f, 0xfc, 0x7e, 0x80, 0xdf,
   0xff, 0x80, 0x03, 0x7e, 0x80, 0xff, 0xf9, 0xff, 0xff, 0x3f, 0x00, 0x07,
   0xfc, 0x00, 0x00, 0x80, 0xff, 0x80, 0x03, 0x7e, 0x00, 0xff, 0xf1, 0xff,
   0xff, 0x3f, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x80, 0x7f, 0x80, 0x01, 0x7e,
   0x00, 0xff, 0xe1, 0xff, 0xff, 0x3f, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x80,
   0x7f, 0x00, 0x01, 0x7f, 0x00, 0xff, 0xc1, 0xff, 0xff, 0x7f, 0x00, 0x06,
   0xfe, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x10, 0xff, 0x00, 0xff, 0xc0, 0xff,
   0xff, 0x7f, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x80, 0x1f, 0x00, 0xfe, 0xff,
   0x00, 0xfe, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x80,
   0x0f, 0x00, 0xfc, 0xff, 0x00, 0xfe, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00,
   0xf8, 0x00, 0x00, 0x80, 0x03, 0x00, 0xf8, 0xff, 0x00, 0x7e, 0xc0, 0xff,
   0xff, 0x7f, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x80, 0x03, 0x00, 0xe0, 0xff,
   0x01, 0x3c, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xf8, 0x00, 0x40, 0x80,
   0x07, 0x00, 0x80, 0xff, 0x01, 0x1c, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00,
   0xf8, 0x1c, 0x40, 0x80, 0x07, 0x10, 0x00, 0xfe, 0xff, 0x0f, 0xe0, 0xff,
   0xff, 0x7f, 0x00, 0x00, 0xf8, 0x0f, 0x60, 0x80, 0x07, 0x18, 0x00, 0xf8,
   0xff, 0x03, 0xe0, 0xff, 0xff, 0x7f, 0x00, 0x01, 0xf8, 0x07, 0x60, 0x80,
   0x07, 0x3c, 0x00, 0x78, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x7f, 0x80, 0x07,
   0x78, 0x00, 0x60, 0x80, 0x07, 0x3c, 0x00, 0x78, 0x00, 0x00, 0xf0, 0xff,
   0xff, 0x7f, 0x80, 0x0f, 0x7c, 0x00, 0x30, 0x80, 0x0f, 0x7e, 0x00, 0x78,
   0x00, 0x00, 0xf0, 0xff, 0xff, 0x7f, 0x80, 0x1f, 0x7c, 0x00, 0x00, 0x80,
   0x0f, 0xff, 0x00, 0x78, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x7f, 0x80, 0x3f,
   0xfc, 0x00, 0x00, 0xc0, 0x8f, 0xff, 0x00, 0x78, 0x00, 0x00, 0xf8, 0xff,
   0xff, 0x7f, 0x80, 0x7f, 0xfc, 0x00, 0x08, 0xc0, 0xcf, 0xff, 0x01, 0x7c,
   0x00, 0x00, 0xfc, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xfc, 0x01, 0x0c, 0xe0,
   0xff, 0xff, 0x03, 0x7c, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x3f, 0x00, 0xff,
   0xfd, 0x01, 0x0e, 0xf0, 0xff, 0xff, 0x0f, 0x7c, 0x00, 0x00, 0xff, 0xff,
   0xff, 0x3f, 0x00, 0xff, 0xff, 0x81, 0x1f, 0xf8, 0xff, 0xff, 0x1f, 0x7c,
   0x00, 0x80, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0xc3, 0x1f, 0xfc,
   0xff, 0xff, 0x7f, 0xfc, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xff,
   0xff, 0xf3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xfc, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };


#define koukoku_g_width 128
#define koukoku_g_height 32
static unsigned char koukoku_g_bits[] = {
   0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfc, 0xff, 0x1f, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x18, 0x00, 0xf0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8,
   0x3f, 0x30, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0x0f, 0xfc, 0xf9, 0x00, 0x00, 0xe0, 0x07, 0x80, 0x83, 0x07,
   0x00, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0xff, 0x83, 0x00, 0x00, 0xe0,
   0x07, 0x00, 0x9f, 0x07, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff,
   0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x9f, 0x07, 0x00, 0x00, 0x00, 0xc0,
   0xc3, 0x03, 0x80, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x07, 0x9f, 0x3f,
   0x00, 0xf0, 0x01, 0xc0, 0x83, 0x03, 0xe0, 0xff, 0x0f, 0x00, 0x00, 0xff,
   0xff, 0x87, 0xff, 0x3f, 0x00, 0xfe, 0x0f, 0xc0, 0x81, 0x03, 0xf0, 0xff,
   0x1f, 0x00, 0x00, 0xff, 0xff, 0x87, 0xff, 0x3f, 0x00, 0xff, 0x1f, 0xc0,
   0x81, 0x03, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x87, 0xff, 0x3f,
   0x80, 0xff, 0x3f, 0xc0, 0x81, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f,
   0xe0, 0xc3, 0x8f, 0x03, 0xc0, 0x07, 0x78, 0xc0, 0x9f, 0x03, 0x00, 0xc0,
   0x1f, 0x00, 0x80, 0x1f, 0x00, 0xc0, 0x87, 0x03, 0xc0, 0x07, 0x70, 0xc0,
   0xbf, 0x01, 0x00, 0xfc, 0x03, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x80, 0x03,
   0xc0, 0x03, 0x70, 0xc0, 0x07, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x80, 0x1f,
   0x00, 0xc0, 0xff, 0xff, 0xc1, 0x61, 0x70, 0x00, 0x00, 0x00, 0xc0, 0xff,
   0x0f, 0x00, 0xc0, 0xc7, 0x03, 0xc0, 0xff, 0xff, 0xe1, 0x71, 0x70, 0x00,
   0x80, 0x1f, 0xe0, 0xff, 0x3f, 0x00, 0xc0, 0xe7, 0x07, 0xc0, 0xff, 0xff,
   0xe1, 0x71, 0x78, 0xf8, 0xc1, 0x7f, 0x00, 0xe0, 0x3f, 0x00, 0xc0, 0xc7,
   0x03, 0xc0, 0xff, 0xff, 0xc1, 0x71, 0x78, 0xfe, 0xe7, 0x7f, 0x00, 0x00,
   0x0f, 0x00, 0xe0, 0xc3, 0x03, 0x00, 0x80, 0x03, 0xc0, 0x3b, 0x7c, 0x0e,
   0xe6, 0x60, 0x00, 0x80, 0x03, 0x00, 0xe0, 0xe3, 0xf1, 0x03, 0x78, 0x00,
   0xc0, 0x3f, 0x3e, 0x0e, 0xe6, 0x60, 0x00, 0xe0, 0x00, 0x00, 0xf8, 0xe3,
   0xf1, 0x03, 0xfe, 0x1f, 0x00, 0x1f, 0x3e, 0x0e, 0xe6, 0x60, 0x00, 0xf8,
   0x80, 0x00, 0xfc, 0xf1, 0xe0, 0x03, 0x8e, 0x3f, 0x00, 0x1e, 0x1e, 0x0e,
   0xe6, 0x60, 0x80, 0xff, 0x7f, 0x00, 0xfe, 0xf9, 0xe0, 0x03, 0x0e, 0x38,
   0x00, 0x00, 0x0c, 0xcc, 0xe6, 0x67, 0x80, 0xff, 0x7f, 0x00, 0xfe, 0xf8,
   0xff, 0x07, 0x0e, 0x38, 0x00, 0x00, 0x00, 0xfc, 0xe6, 0x6f, 0x00, 0xfc,
   0x3f, 0x00, 0xfc, 0xfc, 0xff, 0x07, 0x7e, 0x38, 0x00, 0x00, 0x00, 0xf8,
   0xe0, 0x0f, 0x00, 0xfc, 0x1f, 0x00, 0x78, 0xfc, 0xff, 0x07, 0xfc, 0x39,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x78, 0xf8,
   0xc1, 0x03, 0xfc, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0x0f, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x7c, 0x80, 0x03, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x93, 0x1e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f,
   0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x3f, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff };

#define sushi_r_width 32
#define sushi_r_height 32
static unsigned char sushi_r_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00,
   0x00, 0xfe, 0x7f, 0x0f, 0x00, 0xff, 0xbf, 0x1f, 0x80, 0xe1, 0xdf, 0x3f,
   0xc0, 0x1f, 0xec, 0x7f, 0xe0, 0xff, 0xf7, 0x7f, 0xf0, 0xff, 0x8b, 0x7f,
   0xf0, 0xff, 0x3d, 0x7e, 0xf8, 0xff, 0xfe, 0x39, 0x1c, 0x7e, 0xff, 0x17,
   0xfc, 0xb1, 0xff, 0x0f, 0xfc, 0xdf, 0xff, 0x27, 0xfc, 0xdf, 0xff, 0x17,
   0xfe, 0x2f, 0xfc, 0x23, 0xfe, 0xe7, 0xe1, 0x19, 0xfc, 0xf7, 0x9f, 0x32,
   0xe0, 0xfb, 0x7f, 0x0c, 0x14, 0xf8, 0x7f, 0x3a, 0xae, 0xfa, 0x3f, 0x15,
   0x5a, 0xfb, 0x9f, 0x1e, 0xfe, 0xf1, 0x5f, 0x0f, 0xb6, 0xc6, 0x8f, 0x05,
   0xfc, 0x23, 0xe6, 0x03, 0xdc, 0x5a, 0x51, 0x03, 0x78, 0xbb, 0xea, 0x01,
   0xb0, 0xf0, 0xbd, 0x00, 0x00, 0xd0, 0x7f, 0x00, 0x00, 0xa0, 0x0a, 0x00,
   0x00, 0x40, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define sushi_g_width 32
#define sushi_g_height 32
static unsigned char sushi_g_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00,
   0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
   0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x06, 0xe0, 0x01, 0x00, 0x08,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10,
   0x00, 0xc0, 0x03, 0x20, 0x00, 0x00, 0x1e, 0x18, 0x00, 0x00, 0x60, 0x32,
   0x00, 0x00, 0x00, 0x0c, 0x14, 0x00, 0x00, 0x3a, 0xae, 0x02, 0x00, 0x15,
   0x5a, 0x03, 0x80, 0x1e, 0xfe, 0x01, 0x40, 0x0f, 0xb6, 0x06, 0x80, 0x05,
   0xfc, 0x23, 0xe0, 0x03, 0xdc, 0x5a, 0x51, 0x03, 0x78, 0xbb, 0xea, 0x01,
   0xb0, 0xf0, 0xbd, 0x00, 0x00, 0xd0, 0x7f, 0x00, 0x00, 0xa0, 0x0a, 0x00,
   0x00, 0x40, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00 };

#define HyperWakamoto_width 128
#define HyperWakamoto_height 32
static unsigned char HyperWakamoto_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00,
   0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xf0,
   0x78, 0x00, 0x83, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0x03, 0xf0, 0x78, 0x80, 0xf3, 0x01, 0xf0, 0xc1, 0x03, 0x00,
   0x00, 0x20, 0x78, 0x00, 0x00, 0xc0, 0x07, 0xff, 0x78, 0x80, 0xef, 0x01,
   0xf0, 0xcf, 0x01, 0x60, 0x00, 0xf0, 0xf8, 0x11, 0x00, 0xc0, 0xc7, 0xff,
   0x7f, 0x80, 0xff, 0x01, 0xc0, 0x9f, 0x01, 0xe0, 0x60, 0x78, 0xd8, 0x19,
   0xf0, 0xe3, 0xe3, 0xff, 0xff, 0x01, 0xff, 0x03, 0x00, 0xbf, 0x03, 0xf8,
   0x79, 0xf8, 0x98, 0x19, 0xf8, 0xff, 0xe1, 0xe1, 0xfc, 0x01, 0xfc, 0x03,
   0x00, 0xfc, 0x03, 0xf0, 0x73, 0xf0, 0x9b, 0x19, 0xf8, 0xff, 0xf0, 0xe0,
   0xfc, 0x31, 0xf0, 0x03, 0x3e, 0xf0, 0x43, 0xe0, 0x73, 0xc0, 0x9f, 0x19,
   0xfc, 0x7f, 0xf0, 0xe0, 0xfc, 0x71, 0xc0, 0x1f, 0xfe, 0xff, 0x7f, 0xc0,
   0x7f, 0x00, 0x9f, 0x1f, 0x3c, 0x7e, 0xf0, 0xe0, 0x3c, 0x38, 0x80, 0x7f,
   0xfe, 0xff, 0x7f, 0x00, 0xff, 0x03, 0x00, 0x1f, 0x1c, 0xf8, 0xf0, 0x01,
   0x38, 0x38, 0x80, 0x7f, 0x1c, 0xe0, 0x7f, 0x00, 0xff, 0x03, 0x0f, 0x00,
   0x1c, 0xf0, 0xf1, 0x11, 0x00, 0x78, 0xc0, 0x7d, 0x08, 0xc0, 0x61, 0x10,
   0xfc, 0x8f, 0x9f, 0x03, 0x1c, 0xe0, 0xe1, 0x1f, 0x00, 0xf8, 0xf0, 0x39,
   0x00, 0xc0, 0x01, 0x38, 0x70, 0x8c, 0x99, 0x07, 0x3c, 0xc0, 0xc3, 0x1f,
   0x00, 0xf8, 0xff, 0x21, 0x00, 0xc0, 0x01, 0x3c, 0x70, 0x8c, 0x99, 0x3f,
   0x78, 0xc0, 0xc7, 0x0f, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0xc0, 0x01, 0x1c,
   0x70, 0xfc, 0xff, 0x39, 0x78, 0x80, 0x03, 0x0f, 0x00, 0x00, 0x3e, 0x04,
   0x60, 0xc0, 0x01, 0x3c, 0x70, 0xfc, 0xff, 0x01, 0x18, 0x80, 0x01, 0x04,
   0x00, 0x00, 0x00, 0x07, 0xf0, 0xe0, 0x01, 0xf8, 0x7f, 0x8c, 0x99, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 0xf8, 0xf3, 0x01, 0xf0,
   0x7f, 0x9c, 0x99, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f,
   0xf0, 0xff, 0x00, 0xe0, 0x7f, 0xb8, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x03, 0xe0, 0xff, 0x00, 0x00, 0x00, 0xbe, 0xdf, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x80, 0x1f, 0x00, 0x00,
   0x00, 0x0e, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

#define NTkaga_width 128
#define NTkaga_height 32
static unsigned char NTkaga_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x7f, 0xe0,
   0x1f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf8, 0xff, 0xf0, 0xe1,
   0xff, 0xff, 0xff, 0xe0, 0x1f, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87,
   0xf8, 0xff, 0xc0, 0xe1, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0x00, 0x00, 0xff,
   0xe1, 0xff, 0xff, 0x07, 0xf8, 0xff, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xe0,
   0x1f, 0x00, 0x00, 0xc0, 0xe1, 0xff, 0xff, 0x07, 0x80, 0xff, 0x00, 0xc0,
   0xff, 0xff, 0xff, 0xe0, 0x1f, 0x00, 0x00, 0xc0, 0xe1, 0x7f, 0x80, 0x1f,
   0x80, 0xc3, 0x07, 0x00, 0xfe, 0xff, 0xff, 0xe0, 0x3f, 0x00, 0x00, 0xc0,
   0xc3, 0x03, 0x80, 0x61, 0x80, 0xc1, 0x3f, 0x00, 0xfe, 0xff, 0xff, 0xe0,
   0xff, 0x07, 0x00, 0xe0, 0x03, 0x03, 0x80, 0xe1, 0xf0, 0xc1, 0xff, 0x01,
   0xfe, 0xff, 0xff, 0xe0, 0xff, 0x0f, 0x00, 0xe0, 0x03, 0x03, 0x8e, 0xe1,
   0xf0, 0xe1, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xc0, 0xff, 0x7f, 0x00, 0xf0,
   0x07, 0xff, 0x8f, 0x01, 0xf0, 0x01, 0xff, 0xe1, 0x1f, 0x00, 0x00, 0xc0,
   0xff, 0x3f, 0x00, 0xf0, 0x07, 0xff, 0x8f, 0x01, 0xf0, 0x01, 0x00, 0xe0,
   0x1f, 0x00, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0xfe, 0x1f, 0xff, 0x8f, 0x03,
   0xf0, 0x03, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x80, 0xff,
   0x1f, 0x23, 0x0e, 0xff, 0xff, 0x1f, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0xc0,
   0xff, 0x07, 0xe0, 0xff, 0x1f, 0x22, 0x0e, 0xff, 0xff, 0xff, 0x00, 0xe0,
   0x1f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0x1f, 0x22, 0x0e, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x01, 0xf8, 0xff,
   0x3f, 0x22, 0x1e, 0x0f, 0xf0, 0xff, 0x07, 0xfe, 0xff, 0xff, 0xff, 0xc0,
   0xff, 0x00, 0xfc, 0xff, 0x0f, 0x22, 0x1e, 0x03, 0xf0, 0xff, 0x00, 0xfe,
   0xff, 0xff, 0xff, 0xc0, 0x7f, 0x00, 0xfe, 0xff, 0x0f, 0x20, 0x0e, 0x03,
   0xf0, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x00, 0xff, 0xff,
   0x07, 0x00, 0x00, 0xe3, 0xf1, 0x3f, 0x40, 0xfc, 0xff, 0xff, 0xff, 0xc0,
   0x07, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0xe3, 0xf1, 0x3f, 0x7e, 0xfc,
   0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x80, 0xe3,
   0xf1, 0x3f, 0x7e, 0xfc, 0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xc0,
   0xc3, 0xff, 0xff, 0xc3, 0xf1, 0x3f, 0x7e, 0xfc, 0xff, 0xff, 0xff, 0xc0,
   0x07, 0x00, 0x00, 0xc0, 0xc3, 0xff, 0xff, 0x03, 0xf0, 0x1f, 0x7e, 0xfc,
   0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0xe3, 0xff, 0xff, 0x07,
   0xf0, 0x1f, 0x3e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xc0,
   0xe3, 0xff, 0xff, 0x07, 0xf0, 0x1f, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xfc,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define NTKyoto_width 128
#define NTKyoto_height 32
static unsigned char NTKyoto_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf1, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff,
   0x7f, 0xc0, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xe0,
   0x1f, 0xe0, 0xff, 0xff, 0x1f, 0x80, 0xf1, 0xf8, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xe0, 0x1f, 0x80, 0xff, 0xff, 0x0f, 0x80, 0xf1, 0xf8,
   0x0f, 0xfc, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0x00, 0x00, 0xff,
   0x03, 0x0e, 0xf1, 0xf8, 0x0f, 0xf8, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xe0,
   0x1f, 0x00, 0x00, 0xc0, 0x83, 0x0f, 0xf0, 0xf8, 0x0f, 0xf0, 0x87, 0xe3,
   0xff, 0xff, 0xff, 0xe0, 0x1f, 0x00, 0x00, 0xc0, 0xe3, 0x1f, 0x10, 0x00,
   0x1e, 0xf0, 0x01, 0xe3, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0x00, 0x00, 0xc0,
   0xe3, 0x0f, 0x10, 0x00, 0x7e, 0xf0, 0x01, 0xe3, 0xff, 0xff, 0xff, 0xe0,
   0xff, 0x07, 0x00, 0xe0, 0x23, 0x8e, 0x00, 0x00, 0xfe, 0xf0, 0x01, 0xe3,
   0xff, 0xff, 0xff, 0xe0, 0xff, 0x0f, 0x00, 0xe0, 0x03, 0x8e, 0xc1, 0xf0,
   0xff, 0x1f, 0x01, 0xe3, 0xff, 0xff, 0xff, 0xc0, 0xff, 0x7f, 0x00, 0xf0,
   0x03, 0x8e, 0x01, 0xe1, 0xff, 0x1f, 0xff, 0xe3, 0x1f, 0x00, 0x00, 0xc0,
   0xff, 0x3f, 0x00, 0xf0, 0xc3, 0x8f, 0x01, 0xe0, 0xff, 0x1f, 0xff, 0xe3,
   0x1f, 0x00, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0xfe, 0x8f, 0x8f, 0x01, 0xe0,
   0x03, 0x18, 0x1f, 0x03, 0x1e, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x80, 0xff,
   0x8f, 0x83, 0x21, 0xe0, 0x03, 0x18, 0x1f, 0x03, 0x1e, 0x00, 0x00, 0xc0,
   0xff, 0x07, 0xe0, 0xff, 0x0f, 0x80, 0x63, 0xe0, 0x03, 0x18, 0x1f, 0x03,
   0x1e, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0x0f, 0x80, 0xe3, 0xe1,
   0xff, 0x1f, 0x1f, 0xe3, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x01, 0xf8, 0xff,
   0x1f, 0xf0, 0xff, 0xff, 0xff, 0x1f, 0x1e, 0xe3, 0xff, 0xff, 0xff, 0xc0,
   0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0xff, 0x1f, 0x1e, 0xe3,
   0xff, 0xff, 0xff, 0xc0, 0x7f, 0x00, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0xf0,
   0xff, 0x1f, 0x00, 0xe3, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x00, 0xff, 0xff,
   0x7f, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0xe3, 0xff, 0xff, 0xff, 0xc0,
   0x07, 0x00, 0xfc, 0xff, 0x03, 0x00, 0x00, 0xf1, 0xff, 0x18, 0x80, 0xe3,
   0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xf8, 0x03, 0x80, 0xff, 0xf1,
   0x7f, 0x38, 0x80, 0xe3, 0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xc0,
   0x03, 0xfc, 0xff, 0xf1, 0x3f, 0xf8, 0xe0, 0xe3, 0xff, 0xff, 0xff, 0xc0,
   0x07, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0xff, 0xf1, 0x03, 0xf8, 0xff, 0xe3,
   0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x1f, 0xf0,
   0x03, 0xfe, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xc0,
   0xff, 0x0f, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x07, 0xe0, 0xff, 0x0f, 0x07, 0xf0, 0x87, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xf0,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x1f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };



GFXcanvas1 disp_r_bg(128,32);
GFXcanvas1 disp_g_bg(128,32);

GFXcanvas1 disp_r(128,32);
GFXcanvas1 disp_g(128,32);

void setup1(){

}

void setup(){
  gpio_init(ADDA);
  gpio_set_dir(ADDA, GPIO_OUT);

  gpio_init(ADDB);
  gpio_set_dir(ADDB, GPIO_OUT);

  gpio_init(ADDC);
  gpio_set_dir(ADDC, GPIO_OUT);

  gpio_init(ADDD);
  gpio_set_dir(ADDD, GPIO_OUT);
  
  gpio_init(OE);
  gpio_set_dir(OE, GPIO_OUT);

  gpio_init(DG1);
  gpio_set_dir(DG1, GPIO_OUT);
  
  gpio_init(DG2);
  gpio_set_dir(DG2, GPIO_OUT);
  
  gpio_init(DR1);
  gpio_set_dir(DR1, GPIO_OUT);

  gpio_init(DR2);
  gpio_set_dir(DR2, GPIO_OUT);
  
  gpio_init(STB);
  gpio_set_dir(STB, GPIO_OUT);
  
  gpio_init(CLK);
  gpio_set_dir(CLK, GPIO_OUT);

  sio_hw->gpio_clr = 1 << ADDA;
  sio_hw->gpio_clr = 1 << ADDB;
  sio_hw->gpio_clr = 1 << ADDC;
  sio_hw->gpio_clr = 1 << ADDD;
  sio_hw->gpio_clr = 1 << OE;
  sio_hw->gpio_clr = 1 << STB;
  sio_hw->gpio_clr = 1 << CLK;
  sio_hw->gpio_set = 1 << DR1;
  sio_hw->gpio_set = 1 << DR2;
  sio_hw->gpio_set = 1 << DG1;
  sio_hw->gpio_set = 1 << DG2;

}



int posx = 127;

void loop1(){
  disp_g_bg.fillScreen(0);
  disp_r_bg.fillScreen(0);
  for(int i=0;i<8;i++){
    disp_g_bg.fillScreen(0);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,1);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
    disp_g_bg.fillScreen(1);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,0);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
  }
  for(int i=0;i<4;i++){
    for(posx=128;posx>-32;posx--){
      disp_g_bg.fillScreen(0);
      disp_r_bg.fillScreen(0);
      disp_g_bg.drawXBitmap(posx, 0, sushi_g_bits, 32,32, 1);
      disp_r_bg.drawXBitmap(posx, 0, sushi_r_bits, 32, 32, 1);
      memcpy(disp_g.getBuffer(), disp_g_bg.getBuffer(), 128 * 32 / 8);
      memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
      delay(10);
    }
  }
  for(int i=0;i<8;i++){
    disp_g_bg.fillScreen(0);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,1);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
    disp_g_bg.fillScreen(1);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,0);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
  }
  for(int i=0;i<4;i++){
    for(posx=-128;posx<128;posx++){
      disp_g_bg.fillScreen(0);
      disp_g_bg.drawXBitmap(posx, 0, HyperWakamoto_bits, 128,32, 1);
      memcpy(disp_g.getBuffer(), disp_g_bg.getBuffer(), 128 * 32 / 8);
      delay(10);
    }
  }
  for(int i=0;i<8;i++){
    disp_g_bg.fillScreen(0);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,1);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
    disp_g_bg.fillScreen(1);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,0);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
  }
  for(int i=0;i<4;i++){
    disp_g_bg.fillScreen(0);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);

    disp_r_bg.fillScreen(1);
    disp_r_bg.drawXBitmap(0,0,dokaben_0_bits,128,32,0);
    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    delay(200);

    disp_r_bg.fillScreen(1);
    disp_r_bg.drawXBitmap(0,0,dokaben_1_bits,128,32,0);
    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    delay(200);

    disp_r_bg.fillScreen(1);
    disp_r_bg.drawXBitmap(0,0,dokaben_2_bits,128,32,0);
    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    delay(200);

    disp_r_bg.fillScreen(1);
    disp_r_bg.drawXBitmap(0,0,dokaben_3_bits,128,32,0);
    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    delay(200);

    disp_r_bg.fillScreen(1);
    disp_r_bg.drawXBitmap(0,0,dokaben_4_bits,128,32,0);
    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    delay(200);
  }

  disp_r_bg.fillScreen(0);
  memcpy(disp_r.getBuffer(),disp_r_bg.getBuffer(),128*32/8);
  
  for(int i=0;i<8;i++){
    disp_g_bg.fillScreen(0);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,1);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
    disp_g_bg.fillScreen(1);
    disp_g_bg.drawXBitmap(0,0,NTKyoto_bits,128,32,0);
    memcpy(disp_g.getBuffer(),disp_g_bg.getBuffer(),128*32/8);
    delay(500);
  }
  for(int i=0;i<8;i++){
    disp_r_bg.fillScreen(1);
    disp_g_bg.fillScreen(1);
    disp_g_bg.drawXBitmap(0,0,koukoku_g_bits,128,32,0);

    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    memcpy(disp_g.getBuffer(), disp_g_bg.getBuffer(), 128 * 32 / 8);
    delay(200);

    disp_g_bg.fillScreen(0);
    disp_r_bg.fillScreen(0);
    disp_g_bg.drawXBitmap(0,0,koukoku_g_bits,128,32,1);

    memcpy(disp_r.getBuffer(), disp_r_bg.getBuffer(), 128 * 32 / 8);
    memcpy(disp_g.getBuffer(), disp_g_bg.getBuffer(), 128 * 32 / 8);
    delay(200);
  }
}

void loop() {
    for(int j=0;j<16;j++){
      sio_hw->gpio_clr = 1 << STB;
      for(int i=0;i<128;i++){
        sio_hw->gpio_clr = 1 << CLK;
            if(disp_g.getPixel(i,j)){
              sio_hw->gpio_clr = (1 << DG1);
            }else{
              sio_hw->gpio_set = (1 << DG1);
            }
            if(disp_g.getPixel(i,j+16)){
              sio_hw->gpio_clr = (1 << DG2);
            }else{
              sio_hw->gpio_set = (1 << DG2);
            }
            if(disp_r.getPixel(i,j)){
              sio_hw->gpio_clr = (1 << DR1);
            }else{
              sio_hw->gpio_set = (1 << DR1);
            }
            if(disp_r.getPixel(i,j+16)){
              sio_hw->gpio_clr = (1 << DR2);
            }else{
              sio_hw->gpio_set = (1 << DR2);
            }
          
              /*
              digitalWrite(DG1,disp_g.getPixel(i,j)?LOW:HIGH);
              digitalWrite(DG2,disp_g.getPixel(i,j+16)?LOW:HIGH);
              digitalWrite(DR1,disp_r.getPixel(i,j)?LOW:HIGH);
              digitalWrite(DR2,disp_r.getPixel(i,j+16)?LOW:HIGH);
              */
              /*
              sio_hw->gpio_clr = 1 << DG1;
              sio_hw->gpio_clr = 1 << DG2;
              */
        sio_hw->gpio_set = 1 << CLK;
      }
      sio_hw->gpio_set = 1 << STB;
      if(j&1){
        sio_hw->gpio_set = 1 << ADDA;
      }else{
        sio_hw->gpio_clr = 1 << ADDA;
      }
      if(j&2){
        sio_hw->gpio_set = 1 << ADDB;
      }else{
        sio_hw->gpio_clr = 1 << ADDB;
      }
      if(j&4){
        sio_hw->gpio_set = 1 << ADDC;
      }else{
        sio_hw->gpio_clr = 1 << ADDC;
      }
      if(j&8){
        sio_hw->gpio_set = 1 << ADDD;
      }else{
        sio_hw->gpio_clr = 1 << ADDD;
      }
      sio_hw->gpio_set = 1 << OE;
      sio_hw->gpio_clr = 1 << OE;
    }
}
